{"Installation":{"label":"install","class":"Installation","descr":{"en":"`npm install pilotjs`<br/>\n`cd pilotjs`<br/>\n`npm install`<br/>\n`grunt`","ru":"`npm install pilotjs`<br/>\n`cd pilotjs`<br/>\n`npm install`<br/>\n`grunt`"},"props":{},"fn":{}},"Pilot":{"label":"install","class":"Pilot","descr":{"en":"Multifunctional JavaScript router solves the problem of routing your application,\nproviding full control over the route. It can work either by itself or as a part\nof other framework, such as Backbone, in which it could be an excellent substitute\nfor the standard `Backbone.Router` and even `Backbone.View`. Just try it.","ru":"Многофункциональный JavaScript router, решает проблему маршрутизации вашего приложения,\nобеспечивая полный контроль над маршрутом. Может работать как сам по себе, так и другими framework'ами,\nнапример Backbone, где он станет прекрасной заменой стандартным `Backbone.Router` и даже `Backbone.View`,\nпросто попробуйте."},"props":{"history":{"name":"history","type":"Array","label":"Pilot.history","descr":{"en":"Browsing history, the behavior is similar to `window.history`.","ru":"История навигации, поведение аналогично `window.history`."},"code":{"type":"js","source":{"en":"var Ace = new Pilot;\n\nAce.nav('/airport/');\nAce.nav('/airport/depot/');\n// etc\n\nconsole.log(Ace.history);\n// [\"http://site.com/airport/\", \"http://site.com/airport/depot/\", ..]","ru":"var Ace = new Pilot;\n\nAce.nav('/airport/');\nAce.nav('/airport/depot/');\n// etc\n\nconsole.log(Ace.history);\n// [\"http://site.com/airport/\", \"http://site.com/airport/depot/\", ..]"}}}},"fn":{"constructor":{"name":"constructor","label":"Pilot.constructor","args":{"options":{"en":"parameter object, see an Example","ru":"объект параметров, см. пример"}},"variants":[{"args":[{"name":"options","type":"Object","optional":true}],"descr":{"en":"","ru":""}}],"returns":"void","code":{"type":"js","source":{"en":"var Ivan = new Pilot({\n    el: null // container, which is used to intercept clicks\n  , production: false  // this one is needed for switching off logging and error display\n});","ru":"var Ivan = new Pilot({\n    el: null // контейнер, с которого нужно перехватывать клики\n  , production: false  // нужен для отключения логирования и вывода ошибок\n});"}}},"getUrl":{"name":"getUrl","label":"Pilot.getUrl","args":{"id":{"en":"unique route identifier","ru":"уникальный идентификатор маршрута"},"params":{"en":"parameters used to construct url","ru":"параметры, которые будут использованы при построении url"},"extra":{"en":"additional parameters","ru":"дополнительные параметры"}},"variants":[{"args":[{"name":"id","type":"String","optional":false},{"name":"params","type":"Object","optional":false},{"name":"extra","type":"Object","optional":true}],"descr":{"en":"Get url by route id. You can use this method to construct url by route id and parameters without keeping links inside.","ru":"Получить url, по id маршрута. Чтобы не зашивать ссылки внутри, вы можете использовать данный метода,\nкоторый по id маршрута и параметрам, собирает готовый url."}}],"returns":"String","code":{"type":"js","source":{"en":"var Ivan = new Pilot;\n\n// Add route\nIvan.route('address', '/:city/(street/:id/)', function (evt, req){ });\n\nIvan.getUrl('address'); // return \"/\"\nIvan.getUrl('address', { city: 'berlin' }); // \"/berlin/\"\nIvan.getUrl('address', { city: 'berlin', id: 123 }); // \"/berlin/street/10/\"","ru":"var Ivan = new Pilot;\n\n// Add route\nIvan.route('address', '/:city/(street/:id/)', function (evt, req){ });\n\nIvan.getUrl('address'); // return \"/\"\nIvan.getUrl('address', { city: 'berlin' }); // \"/berlin/\"\nIvan.getUrl('address', { city: 'berlin', id: 123 }); // \"/berlin/street/10/\""}}},"go":{"name":"go","label":"Pilot.go","args":{"id":{"en":"unique route identifier","ru":"уникальный идентификатор маршрута"},"params":{"en":"parameters used to construct url","ru":"параметры, которые будут использоваться для построения url"}},"variants":[{"args":[{"name":"id","type":"String","optional":false},{"name":"params","type":"Object","optional":true}],"descr":{"en":"Navigation by the route id. It is often necessary not only to understand how user moved,\nbut also to move user to the correct url, depending on his actions. This method allows you\nto change the route, operating with its id and parameters only.","ru":"Навигация по id маршрута. Часто нужно не только понять, как переместился пользователь,\nно и в зависимости от его действий перейти на нужный url, этот метод позволяет сменить маршрут,\nоперируя только его id и параметрами."}}],"returns":"jQuery.Deffered","code":{"type":"js","source":{"en":"var Ivan = new Pilot;\n\nIvan.route('coordinates', '/coordinates/:lat/:long', function (evt, req){ });\n\nIvan.go('coordinates', { lat: 16 }); // location: \"/coordinates/16/\"\nIvan.go('coordinates', { lat: 16, long: 178 }); // location: \"/coordinates/16/178/\"","ru":"var Ivan = new Pilot;\n\nIvan.route('coordinates', '/coordinates/:lat/:long', function (evt, req){ });\n\nIvan.go('coordinates', { lat: 16 }); // location: \"/coordinates/16/\"\nIvan.go('coordinates', { lat: 16, long: 178 }); // location: \"/coordinates/16/178/\""}}},"nav":{"name":"nav","label":"Pilot.nav","args":{"url":{"en":"relative or absolute url","ru":"относительный или абсолютный url"},"force":{"en":"force the user to move to the url even if he's already on it","ru":"все равно перейти на нужный урл, даже если мы уже там"}},"variants":[{"args":[{"name":"url","type":"String","optional":false},{"name":"force","type":"Boolean","optional":true}],"descr":{"en":"Navigation by url. With the call of this method, router finds all the handlers for this route and goes to it.\nIf url has not been changed, the transition will not be executed, but you can get round it using `force` parameter.","ru":"Навигация по url. Вызывая этот метод, роутер найдет все обработчики, для данного\nмаршрута и перейдет на него. Если url не изменился, то переход выполнен не будет,\nно это можно обойти, используй параметр `force`."}}],"returns":"jQuery.Deffered","code":{"type":"js","source":{"en":"var Ivan = new Pilot\n            .on('beforeroute', function (req){  })\n            .on('route', function (req){  })\n            .on('404', function (req){ console.log('Route not found'); })\n            .route('/base/moscow/', function (evt, req){\n              console.log('Greetings from Moscow');\n            })\n;\n\nIvan.nav('/base/moscow/'); // \"Greetings from Moscow\"\nIvan.nav('/base/moon/'); // \"Route not found\"","ru":"var Ivan = new Pilot\n            .on('beforeroute', function (req){  })\n            .on('route', function (req){  })\n            .on('404', function (req){ console.log('Route not found'); })\n            .route('/base/moscow/', function (evt, req){\n              console.log('Greetings from Moscow');\n            })\n;\n\nIvan.nav('/base/moscow/'); // \"Greetings from Moscow\"\nIvan.nav('/base/moon/'); // \"Route not found\""}}},"start":{"name":"start","label":"Pilot.start","args":{"url":{"en":"initial routing point","ru":"начальная \"точка\" маршрутизации"}},"variants":[{"args":[{"name":"url","type":"String","optional":true}],"descr":{"en":"Start router. When called with no parameters, the initial url is obtained through `Pilot.getLocation`.","ru":"Запустить роутер. Если вызывать без параметров, начальный url будет получен через `Pilot.getLocation`."}}],"returns":"void"},"route":{"name":"route","label":"Pilot.route:simple","args":{"pattern":{"en":"used for matching request while navigation","ru":"будет использован, для сопоставления с запросом при навигации"},"handler":{"en":"called with `event` and `request` parameters, if `pattern` matched with url","ru":"будет вызван с двумя параметрами event и request, если pattern подошел к url"},"withEndEvent":{"en":"calls `handler` in the end of route","ru":"вызывать `handler` при завершении маршрута"},"id":{"en":"unique route identifier","ru":"уникальный идентификатор маршрута"},"ctrl":{"en":"controller methods or successor `Pilot.Route`","ru":"методы котроллера или наследник `Pilot.Route`"},"options":{"en":"initialization options","ru":"будут переданным при инстанцировании контроллера"}},"variants":[{"args":[{"name":"pattern","type":"String","optional":false},{"name":"handler","type":"Function","optional":false},{"name":"withEndEvent","type":"Boolean","optional":true}],"descr":{"en":"A simple way to add a route.","ru":"Простой способ добавления маршрута."}},{"args":[{"name":"id","type":"String","optional":false},{"name":"pattern","type":"String","optional":false},{"name":"handler","type":"Function","optional":false},{"name":"withEndEvent","type":"Boolean","optional":true}],"descr":{"en":"A simple way to add a named route.","ru":"Простой способ добавления именного маршрута."}},{"args":[{"name":"pattern","type":"String","optional":false},{"name":"ctrl","type":"Object|Pilot.Route","optional":false}],"descr":{"en":"Add a route controller. Route controller is a powerful tool. With its help one you can tell the\nrouter (passing `Deffered` parameter), that it ought to wait for the receipt of data and only\nthen make the move to the route. This approach works well in combination with multiple controllers\non one route, where each one performs its small task, e.g., the first one gets a banner, the second\none get list of posts, and the third one gets user profile.","ru":"Добавить контроллер маршрута. Контроллер маршрута — это уже серьезно, с помощью его можно\nсообщить роутеру (передав Deffered), что сначала нужно дождаться получения данных и только потом, осуществить\nпереход на маршрут. Такой подход хорош в сочетании с множественными контроллерами на один маршрут,\nгде каждый выполняет свою маленькую задачу, например один получает баннер, другой список постов, а третий\nпрофиль юзера."}},{"args":[{"name":"id","type":"String","optional":false},{"name":"pattern","type":"String","optional":false},{"name":"ctrl","type":"Object|Pilot.Route","optional":false}],"descr":{"en":"Add a named route controller.","ru":"Добавить именованный контроллер маршрута."}}],"returns":"Pilot","code":{"type":"js","source":{"en":"var airport = Pilot.Route.extend({\n    onRoute: function (){\n        console.log('base:', this.getData().name);\n    }\n});\n\nIvan\n    .route('/base/1', airport, { data: { name: 'Moscow' } })\n    .route('/base/2', airport, { data: { name: 'Yaroslavl' } })\n;\n\nIvan.nav('/base/1'); // \"base: Moscow\"\nIvan.nav('/base/2'); // \"base: Yaroslavl\"","ru":"var airport = Pilot.Route.extend({\n    onRoute: function (){\n        console.log('base:', this.getData().name);\n    }\n});\n\nIvan\n    .route('/base/1', airport, { data: { name: 'Moscow' } })\n    .route('/base/2', airport, { data: { name: 'Yaroslavl' } })\n;\n\nIvan.nav('/base/1'); // \"base: Moscow\"\nIvan.nav('/base/2'); // \"base: Yaroslavl\""}}},"createGroup":{"name":"createGroup","label":"Pilot.createGroup","args":{"pattern":{"en":"base pattern","ru":"базавый паттерн"},"id":{"en":"unique route identifier","ru":"уникальный идентификатор маршрута"}},"variants":[{"args":[{"name":"pattern","type":"String","optional":false}],"descr":{"en":"Create a group and assign routes relative to it.","ru":"Создайте группу и назначайте маршруты относительно её."}},{"args":[{"name":"id","type":"String","optional":false},{"name":"pattern","type":"String","optional":false}],"descr":{"en":"Create a named group","ru":"Создание именованной группы"}}],"returns":"Pilot","code":{"type":"js","source":{"en":"var Ivan = new Pilot;\n            .createGroup('/base/')\n                .route('.', function (evt, req){ console.log('def'); })\n                .route(':id', function (evt, req){\n                  console.log('base: '+.req.params.id);\n                })\n                .closeGroup()\n;\n\nIvan.nav('/base/'); // \"def\"\nIvan.nav('/base/123/'); // \"base: 123\"","ru":"var Ivan = new Pilot;\n            .createGroup('/base/')\n                .route('.', function (evt, req){ console.log('def'); })\n                .route(':id', function (evt, req){\n                  console.log('base: '+.req.params.id);\n                })\n                .closeGroup()\n;\n\nIvan.nav('/base/'); // \"def\"\nIvan.nav('/base/123/'); // \"base: 123\""}}},"closeGroup":{"name":"closeGroup","label":"Pilot.closeGroup","args":{},"variants":[{"args":0,"descr":{"en":"Close the group and return the last one or router.","ru":"Закрыть группу и вернуть предыдущую, либо сам роутер"}}],"returns":"Pilot"},"on":{"name":"on","label":"Pilot.on","args":{"events":{"en":"one or more events, `namespace` can be used","ru":"одно или несколько событий, можно использовать namespace"},"fn":{"en":"handler function","ru":"функция обработчик"}},"variants":[{"args":[{"name":"events","type":"String","optional":false},{"name":"fn","type":"Function","optional":false}],"descr":{"en":"Add a handler for one or more events. Pilot has four events: `beforeroute`, `route`, `404` и `error`","ru":"Добавить обработчик одного или нескольких событий.\nУ Pilot есть четыре события: `beforeroute`, `route`, `404` и `error`"}}],"returns":"Pilot","code":{"type":"js","source":{"en":"new Pilot\n  .on('beforeroute', function (evt/**$.Event*/, req/**Pilot.Request*/){ })\n  .on('route', function (evt/**$.Event*/, req/**Pilot.Request*/){ })\n  .on('404', function (evt/**$.Event*/, req/**Pilot.Request*/){ })\n  .on('error', function (evt/**$.Event*/, err/**Error*/){ })\n;","ru":"new Pilot\n  .on('beforeroute', function (evt/**$.Event*/, req/**Pilot.Request*/){ })\n  .on('route', function (evt/**$.Event*/, req/**Pilot.Request*/){ })\n  .on('404', function (evt/**$.Event*/, req/**Pilot.Request*/){ })\n  .on('error', function (evt/**$.Event*/, err/**Error*/){ })\n;"}}},"off":{"name":"off","label":"Pilot.off","args":{"events":{"en":"one or more events, `namespace` can be used","ru":"одно или несколько событий, можно использовать namespace"},"fn":{"en":"handler function","ru":"функция обработчик"}},"variants":[{"args":[{"name":"events","type":"String","optional":false},{"name":"fn","type":"Function","optional":false}],"descr":{"en":"Switch off event handler.","ru":"Снять обработчик события."}}],"returns":"Pilot","code":{"type":"js","source":{"en":"new Pilot\n  // Subscribe\n  .on('route.one', function (evt/**$.Event*/, req/**Pilot.Request*/){\n    // Unsubscribe using namespace\n    this.off('.one');\n  })\n;","ru":"new Pilot\n  // Подписываемся\n  .on('route.one', function (evt/**$.Event*/, req/**Pilot.Request*/){\n    // Отписываемся используя namespace\n    this.off('.one');\n  })\n;"}}},"emit":{"name":"emit","label":"Pilot.emit","args":{"event":{"en":"event name","ru":"название события"},"args":{"en":"extra arguments","ru":"дополнительные аргументы"}},"variants":[{"args":[{"name":"event","type":"String","optional":false},{"name":"args","type":"Array","optional":true}],"descr":{"en":"Emit event.","ru":"Испустить событие."}}],"returns":"Pilot","code":{"type":"js","source":{"en":"var Ace = new Pilot\n  .on('custom', function (evt/**$.Event*/, foo/**String*/){  })\n;\n\n\n// Emit event\nAce.emit('custom', [\"foo\"]);","ru":"var Ace = new Pilot\n  .on('custom', function (evt/**$.Event*/, foo/**String*/){  })\n;\n\n\n// Испускаем событие\nAce.emit('custom', [\"foo\"]);"}}},"hasBack":{"name":"hasBack","label":"Pilot.hasBack","args":{},"variants":[{"args":0,"descr":{"en":"Verify that you can go back through `history`","ru":"Проверка возможности перехода назад по `history`"}}],"returns":"Boolean"},"hasForward":{"name":"hasForward","label":"Pilot.hasForward","args":{},"variants":[{"args":0,"descr":{"en":"Verify that you can go forward through `history`","ru":"Проверка возможности перехода вперед по `history`"}}],"returns":"Boolean"},"back":{"name":"back","label":"Pilot.back","args":{},"variants":[{"args":0,"descr":{"en":"Go to the previous url in `history`","ru":"Перейти на предыдущий url в `history`"}}],"returns":"jQuery.Deffered"},"forward":{"name":"forward","label":"Pilot.forward","args":{},"variants":[{"args":0,"descr":{"en":"Go to the next url relative to the current position in `history`","ru":"Перейти на следующий url, относительно текущий позиции в `history`"}}],"returns":"jQuery.Deffered"}}},"Pilot.Route":{"label":"Pilot.Route","class":"Pilot.Route","descr":{"en":"This class of the route controller allows not only to control events of starting,\nchanging or ending of the route, but also to inform the router that before going to\nthe correct url it has to wait the collection of data necessary to this controller.","ru":"Класс контроллера маршрута, позволяет не только, контролировать события начала,\nизменения и конца маршрута, но и сообщать роутеру, что перед переходом, на нужный url\nнужно дождаться сбора данных, нужных этому контроллеру."},"props":{"@events":{"name":"@events","type":-1,"label":"Pilot.Route.@events","descr":{"en":"Available events: `routestart`, `routechange` and `routeend`.\nThere is also `route` event, which is similar to `routestart` and `routechange`.","ru":"Доступные события: `routestart`, `routechange` и `routeend`.\nТакже есть событие `route`, соответсвует `routestart` и `routechange`."},"code":{"type":"js","source":{"en":"var airbase = Pilot.Route.extend({\n  init: function (){\n    this.on('routestart routeend', function (evt/**$.Event*/, req/**Pilot.Request*/){\n      // ...\n    });\n  },\n\n  onRoute: function (evt/**$.Event*/, req/**Pilot.Request*/){\n    // You can also define a method with the name of the event\n  }\n});","ru":"var airbase = Pilot.Route.extend({\n  init: function (){\n    this.on('routestart routeend', function (evt/**$.Event*/, req/**Pilot.Request*/){\n      // ...\n    });\n  },\n\n  onRoute: function (evt/**$.Event*/, req/**Pilot.Request*/){\n    // Также можно определить метод с названием события\n  }\n});"}}},"accessPermission":{"name":"accessPermission","type":"String","label":"Pilot.Route.accessPermission","descr":{"en":"","ru":"Установить доступ к маршруту."},"code":{"type":"js","source":{"en":"Pilot.access['denied'] = function (req/**Pilot.Request*/){\n  return  false;\n};\n\nvar Spy = new Pilot;\n\nSpy.route('/public/', function (){ console.log(\"Public!\"); })\n\nSpy.route('/private/', {\n  accessPermission: 'denied', // permission\n  accessDeniedRedirectTo: '/public/'\n});\n\nSpy.route('/public/closed/', {\n  accessPermission: 'denied', // permission\n  accessDeniedRedirectTo: '..'\n});\n\n\nSpy.nav('/private/'); // \"Public!\"\nSpy.nav('/public/closed/'); // \"Public!\"","ru":"Pilot.access['denied'] = function (req/**Pilot.Request*/){\n  return  false;\n};\n\nvar Spy = new Pilot;\n\nSpy.route('/public/', function (){ console.log(\"Public!\"); })\n\nSpy.route('/private/', {\n  accessPermission: 'denied', // permission\n  accessDeniedRedirectTo: '/public/'\n});\n\nSpy.route('/public/closed/', {\n  accessPermission: 'denied', // permission\n  accessDeniedRedirectTo: '..'\n});\n\n\nSpy.nav('/private/'); // \"Public!\"\nSpy.nav('/public/closed/'); // \"Public!\""}}},"accessDeniedRedirectTo":{"name":"accessDeniedRedirectTo","type":"String","label":"Pilot.Route.accessDeniedRedirectTo","descr":{"en":"Adopt such values ​​as: `url`, `route id`, `function` or `..` to rise to a up level.","ru":"Редирект, в случае отказа в доступе.\nПринимает такие значения как: `url`, `route id`, `function` или `..` чтобы подняться на уровень вверх."},"code":{"type":"js","source":{"en":"var ClosedBase = Pilot.Route.extend({\n  accessPermission: false,\n  accessDeniedRedirectTo: function (req/**Pilot.Request*/){\n    return  this.router.getUrl('home');\n  }\n});","ru":"var ClosedBase = Pilot.Route.extend({\n  accessPermission: false,\n  accessDeniedRedirectTo: function (req/**Pilot.Request*/){\n    return  this.router.getUrl('home');\n  }\n});"}}},"inited":{"name":"inited","type":"Boolean","label":"Pilot.Route.inited","descr":{"en":"Route initialization flag.","ru":"Флаг инициализации маршрута."},"code":{"type":"js","source":{"en":"var airbase = Pilot.Route.extend({\n  loadData: function (){\n    if( !this.inited ){\n      this.setData({ name: 'Ramstein' });\n    }\n  }\n});","ru":"var airbase = Pilot.Route.extend({\n  loadData: function (){\n    if( !this.inited ){\n      this.setData({ name: 'Ramstein' });\n    }\n  }\n});"}}},"router":{"name":"router","type":"Pilot","label":"Pilot.Route.router","descr":{"en":"Link to the router.","ru":"Ссылка на роутер."}},"boundAll":{"name":"boundAll","type":"Array","label":"Pilot.Route.boundAll","descr":{"en":"List of methods that will be executed in the context of the object.\nIt's very convenient for using with functions which will be used as event handlers.","ru":"Список методов, которые будут выполняться в контексте этого объекта.\nОчень удобно для функций, которые будут использоваться в качестве обработчиков событий."},"code":{"type":"js","source":{"en":"var City = Pilot.Route.extend({\n    name: 'Moscow',\n    boundAll: ['matryoshka', 'vodka', 'balalaika'],\n    init: function (){\n        $('#take').click(this.matryoshka);\n        $('#drink').click(this.vodka);\n        $('#play').click(this.balalaika);\n    },\n    matryoshka: function (evt){ console.log(this.city+': take ', evt) },\n    vodka: function (evt){ console.log(this.city+': drink ', evt) },\n    balalaika: function (evt){ console.log(this.city+': play ', evt) },\n});","ru":"var City = Pilot.Route.extend({\n    name: 'Moscow',\n    boundAll: ['matryoshka', 'vodka', 'balalaika'],\n    init: function (){\n        $('#take').click(this.matryoshka);\n        $('#drink').click(this.vodka);\n        $('#play').click(this.balalaika);\n    },\n    matryoshka: function (evt){ console.log(this.city+': take ', evt) },\n    vodka: function (evt){ console.log(this.city+': drink ', evt) },\n    balalaika: function (evt){ console.log(this.city+': play ', evt) },\n});"}}}},"fn":{"bound":{"name":"bound","label":"Pilot.Route.bound","args":{"fn":{"en":"function or its name in the controller","ru":"функция, либо её название в контроллере"}},"variants":[{"args":[{"name":"fn","type":"String|Function","optional":false}],"descr":{"en":"Bound the method with the context of the controller.","ru":"Связать метод с контекстом контроллера."}}],"returns":"Function","code":{"type":"js","source":{"en":"var airport = Pilot.View.extend({\n    el: '#airport',\n    init: function (){\n        // Bound function\n        this.$el.on('mouseenter', this.bound(function (evt){\n            this._onHover(evt);\n        }));\n        \n        // Bound by method name\n        this.$el.on('mouseleave', this.bound('_onHover'));\n    },\n    _onHover: function (evt){\n        this.$el.toggleClass('hovered', evt.type == 'mouseenter');\n    }\n});","ru":"var airport = Pilot.View.extend({\n    el: '#airport',\n    init: function (){\n        // Bound function\n        this.$el.on('mouseenter', this.bound(function (evt){\n            this._onHover(evt);\n        }));\n        \n        // Bound by method name\n        this.$el.on('mouseleave', this.bound('_onHover'));\n    },\n    _onHover: function (evt){\n        this.$el.toggleClass('hovered', evt.type == 'mouseenter');\n    }\n});"}}},"init":{"name":"init","label":"Pilot.Route.init","args":{},"variants":[{"args":0,"descr":{"en":"This method is intended to redefine and should be called once at the time of initialization of the controller.\nRemember that the initialization is not involved in creating the instance, that occurs in the first\ncall of the controller after `loadData`, but before the `routestart` event.","ru":"Это метод рассчитан на переопределение и будет вызван один раз в момент инициализации контроллера.\nПомните, что инициализация не связана созданием инстанса, она происходит при первом вызове контроллера,\nпосле `loadData`, но до события `routestart`."}}],"returns":"void","code":{"type":"js","source":{"en":"var airport = Pilot.Route.extend({\n    init: function (){\n        this.$el = $('#airport');\n    }\n});","ru":"var airport = Pilot.Route.extend({\n    init: function (){\n        this.$el = $('#airport');\n    }\n});"}}},"loadData":{"name":"loadData","label":"Pilot.Route.loadData","args":{"req":{"en":"request object","ru":"объект запроса"}},"variants":[{"args":[{"name":"req","type":"Pilot.Request","optional":false}],"descr":{"en":"This method should be called before `routestart`, `routechange`.\nIf `$.Deffered` returns, router will wait for the end of the controller data collection\nand then execute the navigation.","ru":"Метод будет вызван перед событием `routestart`, `routechange`. Если вренуть $.Deffered,\nто роутер дождётся окончания сбора данных контроллера и только потом осуществит навигацию."}}],"returns":"jQuery.Deffered|Null","code":{"type":"js","source":{"en":"var airport = Pilot.Route.extend({\n    loadData: function (req){\n        return $.ajax('/load/data/', req.query, this.bound(function (data){\n            this.setData( data );\n        }));\n    },\n    onRoute: function (){\n        var data = this.getData();\n    }\n});","ru":"var airport = Pilot.Route.View.extend({\n    loadData: function (req){\n        return $.ajax('/load/data/', req.query, this.bound(function (data){\n            this.setData( data );\n        }));\n    },\n    onRoute: function (){\n        var data = this.getData();\n    }\n});"}}},"getUrl":{"name":"getUrl","label":"Pilot.Route.getUrl","args":{"id":{"en":"unique route identifier","ru":"уникальный идентификатор маршрута"},"params":{"en":"parameters used to construct url","ru":"параметры, которые будут использованы при построении url"},"extra":{"en":"additional parameters","ru":"дополнительные параметры"}},"variants":[{"args":[{"name":"id","type":"String","optional":false},{"name":"params","type":"Object","optional":false},{"name":"extra","type":"Object","optional":true}],"descr":{"en":"Get url by route id. You can use this method to construct url by route id and parameters without keeping links inside.","ru":"Получить url, по id маршрута. Чтобы не зашивать ссылки внутри, вы можете использовать данный метода,\nкоторый по id маршрута и параметрам, собирает готовый url."}}],"returns":"String"},"getData":{"name":"getData","label":"Pilot.Route.getData","args":{},"variants":[{"args":0,"descr":{"en":"A simple method to get controller data.","ru":"Простой метод, для получения данных хранимых контроллером."}}],"returns":"Object","code":{"type":"js","source":{"en":"var airport = Pilot.Route.extend({\n    data: { name: 'default' }\n});\n\n(new airport).getData().name; // \"default\"\n(new airport({ data: { name: 'NY' } })).getData().name; // \"NY\"","ru":"var airport = Pilot.Route.extend({\n    data: { name: 'default' }\n});\n\n(new airport).getData().name; // \"default\"\n(new airport({ data: { name: 'NY' } })).getData().name; // \"NY\""}}},"setData":{"name":"setData","label":"Pilot.Route.setData","args":{"data":{"en":"new data","ru":"новые данные"},"merge":{"en":"merge with the current ones","ru":"слить с уже установленными данными"}},"variants":[{"args":[{"name":"data","type":"Object","optional":false},{"name":"merge","type":"Boolean","optional":true}],"descr":{"en":"Set new controller data or merge with the current ones.","ru":"Установит данные контроллера, или слить с текущими."}}],"returns":"Pilot.Route","code":{"type":"js","source":{"en":"var airport = Pilot.Route.extend({\n    data: { name: 'default', city: 'unknown' }\n});\n\n(new airport).setData({ name: 'Foo' }).getData();\n// { name: 'Foo' }\n\n(new airport).setData({ name: 'Foo' }, true).getData();\n// { name: 'Foo', city: 'unknown' }\n\n(new airport).setData({ name: 'Foo', city: 'Bar' }).getData();\n// { name: 'Foo', city: 'Bar' }","ru":"var airport = Pilot.Route.extend({\n    data: { name: 'default', city: 'unknown' }\n});\n\n(new airport).setData({ name: 'Foo' }).getData();\n// { name: 'Foo' }\n\n(new airport).setData({ name: 'Foo' }, true).getData();\n// { name: 'Foo', city: 'unknown' }\n\n(new airport).setData({ name: 'Foo', city: 'Bar' }).getData();\n// { name: 'Foo', city: 'Bar' }"}}}}},"Pilot.View":{"label":"Pilot.View","class":"Pilot.View","descr":{"en":"`Pilot.Route` successor implements methods for working with DOM elements, events and patterning.\nBy default, `Pilot.View` is subscribed to `routestart` and `routeend` events and controls the visibility\nof a DOM element associated with it, setting it to `display: none` or removing it.","ru":"Наследник Pilot.Route, имплементирует в себе методы для работы с DOM элементами, событиями и шаблонизацией.\nПо умолчанию, `Pilot.View` подписан события `routestart` и `routeend` контролируя видимость\nDOM элемента, связанного с ним, выставляя ему `display: none` или убирая его."},"props":{"el":{"name":"el","type":"HTMLElement","label":"Pilot.View.el","descr":{"en":"Link to the DOM element, with which `View` is working.","ru":"Ссылка на DOM элемент, за которые отвечает вид."},"code":{"type":"js","source":{"en":"var airport = Pilot.View.extend({\n    el: '#airport-default'\n});\n\n(new airport).el; // HTMLElement: <div id=\"airport-default\">..</div>\n(new airport({ el: '#moscow' })).el; // HTMLElement: <div id=\"moscow\">..</div>","ru":"var airport = Pilot.View.extend({\n    el: '#airport-default'\n});\n\n(new airport).el; // HTMLElement: <div id=\"airport-default\">..</div>\n(new airport({ el: '#moscow' })).el; // HTMLElement: <div id=\"moscow\">..</div>"}}},"$el":{"name":"$el","type":"jQuery","label":"Pilot.View.$el","descr":{"en":"jQuery collection, for more convenient work.","ru":"jQuery коллекция, для более удобной работы."},"code":{"type":"js","source":{"en":"var base = Pilot.View.extend({\n    el: '#moscow'\n});\n\n(new base).el; // jQuery[<div id=\"moscow\">..</div>]\n(new base({ el: '#moon' })).el; // jQuery[<div id=\"moon\">..</div>]","ru":"var base = Pilot.View.extend({\n    el: '#moscow'\n});\n\n(new base).el; // jQuery[<div id=\"moscow\">..</div>]\n(new base({ el: '#moon' })).el; // jQuery[<div id=\"moon\">..</div>]"}}},"tagName":{"name":"tagName","type":"String","label":"Pilot.View.tagName","descr":{"en":"If you specify this option, this tag will be created while the initialization.","ru":"Если указать этот параметр, то при инициализации будет создан этот тег."},"code":{"type":"js","source":{"en":"var base = Pilot.View.extend({\n    tagName: 'span'\n});\n\n(new base).el; // HTMLElement: <span>..</span>\n(new base).$el.appendTo('body'); // jQuery[<span>..</span>]","ru":"var base = Pilot.View.extend({\n    tagName: 'span'\n});\n\n(new base).el; // HTMLElement: <span>..</span>\n(new base).$el.appendTo('body'); // jQuery[<span>..</span>]"}}},"tag":{"name":"tag","type":"String","label":"Pilot.View.tag","descr":{"en":"Create a tag and put it in the container.","ru":"Создать тег и вставить его в нужный контейнер."},"code":{"type":"js","source":{"en":"var base = Pilot.View.extend({\n    tag: '#box span.base.base_military'\n});\n\n(new base).el; // HTMLElement: <span class=\"base base_military\">..</span>","ru":"var base = Pilot.View.extend({\n    tag: '#box span.base.base_military'\n});\n\n(new base).el; // HTMLElement: <span class=\"base base_military\">..</span>"}}},"singleton":{"name":"singleton","type":"Boolean","label":"Pilot.View.singleton","descr":{"en":"","ru":""},"code":{"type":"js","source":{"en":"var airbase = Pilot.View.extend({\n  el: '#aribase',\n  sigleton: true,\n  onRouteStart: function (evt, req){\n    console.log('start:', req.path);\n  },\n  onRouteChange: function (evt, req){\n    console.log('change:', req.path);\n  },\n  onRouteStart: function (evt, req){\n    console.log('end:', req.path);\n  }\n});\n\nvar Ivan = new Pilot\n  .route('/sky/foo/', airbase)\n  .route('/sky/bar/', airbase)\n  .route('/sky/baz/', function (evt, req){\n    console.log('Sky base Baz');\n  })\n  .route('/sky/qux/', airbase)\n;\n\nIvan.nav('/sky/foo/'); // \"start: /sky/foo/\"\nIvan.nav('/sky/bar/'); // \"change: /sky/bar/\"\nIvan.nav('/sky/qux/'); // \"change: /sky/qux/\"\nIvan.nav('/sky/baz/'); // \"Sky base Baz\"\n                       // \"end: /sky/baz/\"","ru":"var airbase = Pilot.View.extend({\n  el: '#aribase',\n  sigleton: true,\n  onRouteStart: function (evt, req){\n    console.log('start:', req.path);\n  },\n  onRouteChange: function (evt, req){\n    console.log('change:', req.path);\n  },\n  onRouteStart: function (evt, req){\n    console.log('end:', req.path);\n  }\n});\n\nvar Ivan = new Pilot\n  .route('/sky/foo/', airbase)\n  .route('/sky/bar/', airbase)\n  .route('/sky/baz/', function (evt, req){\n    console.log('Sky base Baz');\n  })\n  .route('/sky/qux/', airbase)\n;\n\nIvan.nav('/sky/foo/'); // \"start: /sky/foo/\"\nIvan.nav('/sky/bar/'); // \"change: /sky/bar/\"\nIvan.nav('/sky/qux/'); // \"change: /sky/qux/\"\nIvan.nav('/sky/baz/'); // \"Sky base Baz\"\n                       // \"end: /sky/baz/\""}}},"template":{"name":"template","type":"Fucntion","label":"Pilot.View.template","descr":{"en":"Here can be any patterning function.","ru":"Тут может быть любая функция шаблонизации."},"code":{"type":"js","source":{"en":"var region = Pilot.View.extend({\n    template: function (data/**Object*/){\n      /* \"data\" is equal this.getData() */\n      // Use any template engine\n      return  xtpl.fetch('templates/region.xtpl', data);\n    }\n});","ru":"var region = Pilot.View.extend({\n    template: function (data/**Object*/){\n      /* \"data\" is equal this.getData() */\n      // Use any template engine\n      return  xtpl.fetch('templates/region.xtpl', data);\n    }\n});"}}}},"fn":{"toggleView":{"name":"toggleView","label":"Pilot.View.toggleView","args":{"state":{"en":"`true`: route start, `false`: route end","ru":"true начало маршрута, false - конец"}},"variants":[{"args":[{"name":"state","type":"Boolean","optional":false}],"descr":{"en":"This method is called at the start and in the end of the route.\nIts redefining can help you change the way elements are displayed, e.g., to add the animation.","ru":"Это метод вызывается в начале маршрута и конце, переопределив его вы можете изменить способ, которым отображать\nсвязанные элемент, например добавив анимацию."}}],"returns":"void","code":{"type":"js","source":{"en":"var region = Pilot.View.extend({\n    toggleView: function (state/**Boolean*/){\n      this.$el.animate({ opacity: +state }, 'fast');\n    }\n});","ru":"var region = Pilot.View.extend({\n    toggleView: function (state/**Boolean*/){\n      this.$el.animate({ opacity: +state }, 'fast');\n    }\n});"}}},"setElement":{"name":"setElement","label":"Pilot.View.setElement","args":{"selector":{"en":"string containing jQuery selector or HTMLElement, [detail](http://api.jquery.com/jQuery/)","ru":"строка содержащая jQuery selector или HTMLElement, [detail](http://api.jquery.com/jQuery/)"}},"variants":[{"args":[{"name":"selector","type":"jQuerySelector","optional":false}],"descr":{"en":"Set the element with which 'View' is working (automatically changes `this.el` and `this.$el` properties).","ru":"Установить элемент, с которым работает вид, автоматически меняет свойства `this.el` и `this.$el`."}}],"returns":"Pilot.View"},"$":{"name":"$","label":"Pilot.View.$","args":{"selector":{"en":"string containing jQuery selector or HTMLElement, [detail](http://api.jquery.com/jQuery/)","ru":"строка содержащая jQuery selector или HTMLElement, [detail](http://api.jquery.com/jQuery/)"}},"variants":[{"args":[{"name":"selector","type":"jQuerySelector","optional":false}],"descr":{"en":"Select elements inside the 'View' (equal to `this.$el.find`, but more easy).","ru":"Выбрать элементы внутри вида, равносильно `this.$el.find`, но более удобно."}}],"returns":"jQuery"},"getHtml":{"name":"getHtml","label":"Pilot.View.getHtml","args":{"data":{"en":"data for patterning","ru":"данные для шаблонизации"}},"variants":[{"args":[{"name":"data","type":"Object","optional":true}],"descr":{"en":"Get HTML based on `this.template` and sent data or 'View' data.","ru":"Получить HTML на основе `this.template` и переданных данных, либо данных вида."}}],"returns":"String"},"render":{"name":"render","label":"Pilot.View.render","args":{},"variants":[{"args":0,"descr":{"en":"Refresh HTML `this.el` by `this.getHtml()`","ru":"Обновляет HTML `this.el`, при помощи `this.getHtml()`"}}],"returns":"void","code":{"type":"js","source":{"en":"var city = Pilot.View.extend({\n  templateFile: 'city/default.xtpl',\n  template: function (obj){\n    return xtpl.fetch(this.templateFile, obj);\n  },\n  onRoute: function (){\n    this.render();\n  }\n});","ru":"var city = Pilot.View.extend({\n  templateFile: 'city/default.xtpl',\n  template: function (obj){\n    return xtpl.fetch(this.templateFile, obj);\n  },\n  onRoute: function (){\n    this.render();\n  }\n});"}}}}},"Pattern-syntax route":{"label":"Pilot.View.render","class":"Pattern-syntax route","descr":{"en":"<ul style=\"line-height: 180%\">\n\t<li>`/search/` — strict match</li>\n\t<li>`/gallery/:tag/` — parameterized</li>\n\t<li>`/search/result/:page?` — parameterized  (optional)</li>\n\t<li>`/user/:id(\\\\d+)` — parameter validation</li>\n\t<li>`/search/(result/:page/)?` — grouping</li>\n</ul>","ru":"<ul style=\"line-height: 180%\">\n\t<li>`/search/` — строгое соответсвие</li>\n\t<li>`/gallery/:tag/` — параметризованный</li>\n\t<li>`/search/result/:page?` — параметризованный (необязательный)</li>\n\t<li>`/user/:id(\\\\d+)` — валидация параметров</li>\n\t<li>`/search/(result/:page/)?` — группировка</li>\n</ul>"},"props":{},"fn":{}},"Pilot.Request":{"label":"Pilot.Request","class":"Pilot.Request","descr":{"en":"route: `/gallery/:tag/:perPage?(/page/:page)?`<br/>\nrequest: `/gallery/cubism/20/page/123?search=text`","ru":"route: `/gallery/:tag/:perPage?(/page/:page)?`<br/>\nrequest: `/gallery/cubism/20/page/123?search=text`"},"props":{"@extend":{"name":"@extend","type":-1,"label":"Pilot.Request.@extend","descr":{"en":"Add and use its methods, eg:","ru":"Расширение объекта собственными методами."},"code":{"type":"js","source":{"en":"Pilot.Request.fn.getPage = function (){\n  return  parseInt(this.params.page || this.query.page, 10) || 1;\n};\n\n(new Pilot)\n  .route('/news/page/:page', function (evt, req/**Pilot.Request*/){\n    var page = req.getPage();\n    console.log('news.page:', page);\n  })\n  .route('/search/', function (evt, req/**Pilot.Request*/){\n    var page = req.getPage();\n    console.log('search.page:', page);\n  })\n  .nav('/news/page/') // news.page: 1\n  .nav('/news/page/2/') // news.page: 2\n  .nav('/search/?page=123') // search.page: 123\n;","ru":"Pilot.Request.fn.getPage = function (){\n  return  parseInt(this.params.page || this.query.page, 10) || 1;\n};\n\n(new Pilot)\n  .route('/news/page/:page', function (evt, req/**Pilot.Request*/){\n    var page = req.getPage();\n    console.log('news.page:', page);\n  })\n  .route('/search/', function (evt, req/**Pilot.Request*/){\n    var page = req.getPage();\n    console.log('search.page:', page);\n  })\n  .nav('/news/page/') // news.page: 1\n  .nav('/news/page/2/') // news.page: 2\n  .nav('/search/?page=123') // search.page: 123\n;"}}},"url":{"name":"url","type":"String","label":"Pilot.Request.@extend","descr":{"en":"Absolute url: `http://domain.com/gallery/cubism/20/page/3?search=text`","ru":"Абсолютный url: `http://domain.com/gallery/cubism/20/page/3?search=text`"}},"path":{"name":"path","type":"String","label":"Pilot.Request.@extend","descr":{"en":"The path relative to the web-site root: `/gallery/cubism/20/page/3`","ru":"Путь, относительно корня сайта: `/gallery/cubism/20/page/3`"}},"search":{"name":"search","type":"String","label":"Pilot.Request.@extend","descr":{"en":"GET parameters string: `?search=text`","ru":"Строка GET-параметров: `?search=text`"}},"query":{"name":"query","type":"Object","label":"Pilot.Request.@extend","descr":{"en":"GET parameters object: `{ search: \"text\" }`","ru":"Объект GET-параметров: `{ search: \"text\" }`"}},"params":{"name":"params","type":"Object","label":"Pilot.Request.@extend","descr":{"en":"Route parameters: `{ tag: \"cubism\", perPage: 20, page: 123 }`","ru":"Параметры маршрута: `{ tag: \"cubism\", perPage: 20, page: 123 }`"}},"referrer":{"name":"referrer","type":"String","label":"Pilot.Request.@extend","descr":{"en":"Contains url of previous request: `http://domain.com/gallery/cubism/20/page/12`","ru":"Содержит url предыдущего запроса: `http://domain.com/gallery/cubism/20/page/12`"}}},"fn":{"clone":{"name":"clone","label":"Pilot.Request.@extend","args":{},"variants":[{"args":0,"descr":{"en":"Clone method."}}],"returns":"Pilot.Request"}}},"History API":{"label":"HistoryAPI","class":"History API","descr":{"en":"By default, the library doesn't contain any polyfills and rely only on native support.","ru":"По умолчанию, библиотека не содержит никаких полифилов и рассчитывает только на нативную поддержку."},"props":{"Pilot.pushState":{"name":"Pilot.pushState","type":"Boolean","label":"Pilot.pushState","descr":{"en":"Use the full History API, otherwise `location.hash`.","ru":"Использовать полноценное History API, иначе `location.hash`."},"code":{"type":"js","source":{"en":"Pilot.pushState = true;","ru":"Pilot.pushState = true;"}}}},"fn":{"Pilot.getLocation":{"name":"Pilot.getLocation","label":"Pilot.getLocation","args":{},"variants":[{"args":0,"descr":{"en":"Get current location.","ru":"Получить текущее положение."}}],"returns":"String"},"Pilot.setLocation":{"name":"Pilot.setLocation","label":"Pilot.setLocation","args":{"req":{"en":"request object","ru":"объект запроса"}},"variants":[{"args":[{"name":"req","type":"Object","optional":false}],"descr":{"en":"Set a new location.","ru":"Установить новое положение."}}],"returns":"void"}}},"Changelog":{"label":"changelog","class":"Changelog","descr":{"en":"","ru":""},"props":{"1.3":{"name":"1.3","type":-1,"label":"changelog","descr":{"en":"<ul>\n\t<li>+ `accessPermission` route option</li>\n\t<li>+ `accessDeniedRedirectTo` route option</li>\n</ul>"}},"1.2.1":{"name":"1.2.1","type":-1,"label":"changelog","descr":{"en":"<ul>\n\t<li>+ Support Zepto, Ender or $</li>\n\t<li>Fixed set request params</li>\n\t<li>Fixed Pilot options</li>\n</ul>"}},"1.2.0":{"name":"1.2.0","type":-1,"label":"changelog","descr":{"en":"<ul>\n\t<li>[#4](https://github.com/RubaXa/Pilot/pull/4): Added Pilot.Request.</li>\n\t<li>+ Pilot.utils.each</li>\n\t<li>+ Pilot.utils.extend</li>\n\t<li>+ Pilot.utils.qs.parse(queryString)/**Object*/<li>\n\t<li>+ Pilot.utils.qs.stringify(queryObject)/**String*/<li>\n</ul>"}},"1.1.0":{"name":"1.1.0","type":-1,"label":"changelog","descr":{"en":"<ul>\n\t<li>[#3](https://github.com/RubaXa/Pilot/pull/3): Allow customize selector for links.</li>\n</ul>"}},"1.0.0":{"name":"1.0.0","type":-1,"label":"changelog","descr":{"en":"First release","ru":"First release"}}},"fn":{}}}